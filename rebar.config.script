%% Copyright (c) 2008-2013 mats cronqvist

%% Permission is hereby granted, free of charge, to any person obtaining a copy
%% of this software and associated documentation files (the "Software"), to deal
%% in the Software without restriction, including without limitation the rights
%% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
%% copies of the Software, and to permit persons to whom the Software is
%% furnished to do so, subject to the following conditions:

%% The above copyright notice and this permission notice shall be included in
%% all copies or substantial portions of the Software.

%% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
%% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
%% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
%% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
%% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
%% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
%% THE SOFTWARE.

%% Below is modified copy of rebar.config.script from
%% http://github.com/massemanet/eper

%% -*- mode: erlang;erlang-indent-level: 2;indent-tabs-mode: nil -*-
%% vim: set ft=erlang ts=2 sw=2:

%% this code is not particularly nice.
%% the idea is to test for the presence of functions, in order to set
%% preprocessor flags, so that we can use the preprocessor to hide new
%% functions from old compilers.
%% "erl_opts" gets passed to the compiler.
%% "CONFIG" is a magic rebar thing.
%% The foldl takes a [{function(Predicate/0), atom(Macro)}].
%% If the Predicate is false, the Macro is passed to the compiler.
%% Predicate should test for presence of new functions, and the Macro
%% should be used to enable old functions. That way new functions are
%% enabled by default.

KeyAppendFun = fun
    (Tag, [], E, _)             -> [{Tag, [E]}];
    (Tag, [{Tag, O} | T], E, _) -> [{Tag, [E | O]}|T];
    (Tag, [H | T], E, G)        -> [H | G(Tag, T, E, G)]
end,

CheckFun = fun(CFG, Predicate, Macro) ->
    case Predicate() of
      false -> KeyAppendFun(erl_opts, CFG, {d, Macro}, KeyAppendFun);
      true  -> CFG
    end
end,

FoldLFun = fun({Predicate, Macro}, Cfg) ->
    CheckFun(Cfg, Predicate, Macro)
end,

lists:foldl(FoldLFun, CONFIG,
   [{fun() -> erlang:is_builtin(erlang, timestamp, 0) end, 'USE_NOW'}]).
